import streamlit as st
import json
from typing import Dict, Any
import traceback
from template_manager_tool import TemplateManagerTool

# Import de votre classe existante
from serchtool import AgentAdvisorTool

# Configuration de la page
st.set_page_config(
    page_title="Agent Advisor Interface",
    page_icon="ü§ñ",
    layout="wide"
)

# Initialisation des variables de session
if 'agent_tool' not in st.session_state:
    st.session_state.agent_tool = None
if 'is_initialized' not in st.session_state:
    st.session_state.is_initialized = False
if 'sections_meta' not in st.session_state:
    st.session_state.sections_meta = {}
if 'template_id' not in st.session_state:
    st.session_state.template_id = "brief-001"

# Navigation entre les pages
page = st.sidebar.selectbox(
    "üîÑ Choisir la page",
    ["üë§ Interface Utilisateur", "‚öôÔ∏è Configuration Admin"],
    help="Interface Utilisateur pour votre encadrant, Configuration pour vous"
)

st.sidebar.markdown("---")

# =====================================
# PAGE INTERFACE UTILISATEUR (ENCADRANT)
# =====================================

if page == "üë§ Interface Utilisateur":
    st.title("ü§ñ G√©n√©rateur de Contenu IA")
    st.markdown("*Interface simplifi√©e pour la g√©n√©ration automatique de contenu*")
    
    # V√©rification que l'agent est configur√© et initialis√©
    if not st.session_state.is_initialized or not st.session_state.sections_meta:
        st.error("‚ö†Ô∏è **Configuration requise**")
        st.info("L'administrateur doit d'abord configurer et initialiser l'agent depuis la page 'Configuration Admin'")
        
        # Affichage du statut
        col1, col2 = st.columns(2)
        with col1:
            if st.session_state.sections_meta:
                st.success("‚úÖ Sections configur√©es")
            else:
                st.error("‚ùå Sections non configur√©es")
        with col2:
            if st.session_state.is_initialized:
                st.success("‚úÖ Agent initialis√©")
            else:
                st.error("‚ùå Agent non initialis√©")
    else:
        # Interface utilisateur principale
        st.success("üü¢ **Syst√®me pr√™t** - Vous pouvez g√©n√©rer du contenu")
        
        # Conteneur principal
        with st.container():
            st.markdown("---")
            
            # Section selection et requ√™te c√¥te √† c√¥te
            col1, col2 = st.columns([1, 2])
            
            with col1:
                st.subheader("üìë Section √† traiter")
                
                # Liste des sections disponibles
                sections_list = list(st.session_state.sections_meta.keys())
                selected_section = st.selectbox(
                    "Choisissez la section :",
                    sections_list,
                    help="S√©lectionnez la section que vous voulez remplir"
                )
                
                # Affichage des informations de la section
                if selected_section:
                    section_info = st.session_state.sections_meta[selected_section]
                    
                    st.info(f"**Description:**\n{section_info.get('contenu_initiale', 'N/A')}")
                    
                    with st.expander("ü§ñ Voir le prompt IA", expanded=False):
                        st.write(section_info.get('ia_prompt', 'Aucun prompt d√©fini'))
            
            with col2:
                st.subheader("üí¨ Votre demande")
                
                user_query = st.text_area(
                    "D√©crivez ce que vous voulez g√©n√©rer :",
                    height=150,
                    placeholder="Exemple : Analysez les tendances du march√© e-commerce au Maroc en 2024 et r√©digez une introduction compl√®te pour notre rapport...",
                    help="Soyez pr√©cis sur ce que vous voulez que l'IA g√©n√®re pour cette section"
                )
                
                # Bouton de g√©n√©ration
                st.markdown("---")
                
                if st.button("üöÄ **G√©n√©rer le Contenu**", type="primary", use_container_width=True):
                    if user_query and selected_section:
                        try:
                            # Processus de g√©n√©ration avec feedback visuel
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            
                            # √âtape 1: Recherche
                            status_text.text("üîç Recherche dans la base de connaissances...")
                            progress_bar.progress(25)
                            passages = st.session_state.agent_tool.search_chunks(user_query, limit=2)
                            
                            # √âtape 2: R√©cup√©ration du prompt
                            status_text.text("ü§ñ Pr√©paration de la g√©n√©ration IA...")
                            progress_bar.progress(50)
                            section_data = st.session_state.sections_meta.get(selected_section, {})
                            ia_prompt = section_data.get('ia_prompt', f"G√©n√©rez du contenu pour {selected_section}")
                            
                            # √âtape 3: G√©n√©ration
                            status_text.text("‚úçÔ∏è G√©n√©ration du contenu par l'IA...")
                            progress_bar.progress(75)
                            generated_content = st.session_state.agent_tool.call_deepseek(
                                question=user_query,
                                passages=passages,
                                ia_prompt=ia_prompt
                            )
                            
                            # √âtape 4: Injection
                            status_text.text("üíæ Sauvegarde dans le template...")
                            progress_bar.progress(100)
                            st.session_state.agent_tool.inject(selected_section, generated_content)
                            
                            # Nettoyage des √©l√©ments de progression
                            progress_bar.empty()
                            status_text.empty()
                            
                            # Affichage du succ√®s
                            st.success(f"‚úÖ **Contenu g√©n√©r√© avec succ√®s pour '{selected_section}'!**")
                            
                        except Exception as e:
                            st.error(f"‚ùå **Erreur lors de la g√©n√©ration:** {e}")
                            with st.expander("üîç D√©tails de l'erreur (pour le support technique)"):
                                st.code(traceback.format_exc())
                    else:
                        if not user_query:
                            st.warning("‚ö†Ô∏è Veuillez saisir votre demande")
                        if not selected_section:
                            st.warning("‚ö†Ô∏è Veuillez s√©lectionner une section")
        
        # Section r√©sultats (si du contenu a √©t√© g√©n√©r√©)
        if 'generated_content' in locals():
            st.markdown("---")
            st.subheader(f"üìã R√©sultat pour '{selected_section}'")
            
            # Onglets pour diff√©rentes vues
            tab1, tab2 = st.tabs(["üëÅÔ∏è Aper√ßu", "üìù Code HTML"])
            
            with tab1:
                st.markdown("**Contenu g√©n√©r√© et format√© :**")
                st.markdown(generated_content, unsafe_allow_html=True)
            
            with tab2:
                st.markdown("**Code HTML source :**")
                st.code(generated_content, language="html")
        
        # Statistiques en bas
        st.markdown("---")
        col_stat1, col_stat2, col_stat3 = st.columns(3)
        
        with col_stat1:
            st.metric("üìã Sections", len(st.session_state.sections_meta))
        with col_stat2:
            st.metric("üè∑Ô∏è Template", st.session_state.template_id)
        with col_stat3:
            if 'passages' in locals():
                st.metric("üìÑ Sources", len(passages))

# =====================================
# PAGE CONFIGURATION ADMIN
# =====================================

elif page == "‚öôÔ∏è Configuration Admin":
    st.title("‚öôÔ∏è Configuration Administrateur")
    st.markdown("*Page de configuration technique - R√©serv√©e √† l'administrateur*")
    
    # Sidebar pour la configuration
    with st.sidebar:
        st.header("üîß Param√®tres Syst√®me")
        
        # Configuration de base
        st.subheader("Param√®tres de base")
        template_id = st.text_input("Template ID", value=st.session_state.template_id)
        st.session_state.template_id = template_id
        
        model_path = st.text_input(
            "Mod√®le d'embeddings", 
            value="sentence-transformers/all-MiniLM-L6-v2"
        )
        
        # Configuration Weaviate
        st.subheader("Configuration Weaviate")
        weaviate_host = st.text_input("Host", value="localhost")
        weaviate_port = st.number_input("Port", value=8080, min_value=1)
        grpc_port = st.number_input("gRPC Port", value=50051, min_value=1)
    
    # Interface principale de configuration
    col1, col2 = st.columns([1, 1])
    
    with col1:
        st.header("üìù Configuration des Sections")
        
        sections_meta_json = st.text_area(
            "JSON de Configuration des Sections :",
            value="""{
  "client": {
    "contenu_initiale": "Nom ou organisation pour laquelle le projet est r√©alis√©",
    "contenu": "{{ client }}",
    "ia_prompt": "Quel est le nom du client ou de l'organisation concern√©e par ce projet ?"
  },
  "project": {
    "contenu_initiale": "Titre ou nom du projet",
    "contenu": "{{ project }}",
    "ia_prompt": "Quel est le nom ou le titre de ce projet ?"
  },
  "submission_time": {
    "contenu_initiale": "Date ou moment de soumission du projet ou du rapport",
    "contenu": "{{ submission_time }}",
    "ia_prompt": "Quand ce projet ou document a-t-il √©t√© soumis ?"
  },
  "introduction": {
    "contenu_initiale": "Pr√©sentation g√©n√©rale du projet, du contexte et des parties prenantes",
    "contenu": "{{ introduction }}",
    "ia_prompt": "R√©dige uniquement la section Introduction d‚Äôun rapport de projet. Cette introduction doit pr√©senter le contexte g√©n√©ral du projet ainsi que les acteurs impliqu√©s, sans aborder d'autres parties du rapport (comme la probl√©matique, le budget, les objectifs d√©taill√©s, etc.). Le texte r√©dig√© devra √™tre autonome, et rester strictement limit√© √† l‚Äôintroduction. Ignore toute autre information non li√©e au contexte ou aux acteurs."
  },
  "problematique": {
    "contenu_initiale": "Probl√®me principal que le projet tente de r√©soudre",
    "contenu": "{{ problematique }}",
    "ia_prompt": "R√©dige uniquement la section Planning d‚Äôun rapport de projet. Le texte doit pr√©senter l‚Äôorganisation temporelle du projet, les diff√©rentes phases ou √©tapes pr√©vues, ainsi que les principales √©ch√©ances ou livrables attendus. Le style doit rester professionnel et clair utuliser des tableux si besoin  ?"
  },
  "objectifs_et_attentes": {
    "contenu_initiale": "Objectifs sp√©cifiques du projet et les r√©sultats attendus",
    "contenu": "{{ objectifs_et_attentes }}",
    "ia_prompt": "Quels sont les objectifs du projet et les attentes en termes de r√©sultats ?"
  }
}""",
            height=400
        )
        
        # Validation et sauvegarde du JSON
        try:
            sections_meta = json.loads(sections_meta_json)
            st.session_state.sections_meta = sections_meta
            st.success(f"‚úÖ JSON valide - {len(sections_meta)} sections d√©tect√©es")
            
            if st.button("üíæ Sauvegarder Configuration", type="secondary"):
                st.success("‚úÖ Configuration sauvegard√©e dans la session")
                
        except json.JSONDecodeError as e:
            st.error(f"‚ùå JSON invalide: {e}")
            sections_meta = {}
    
    with col2:
        st.header("üîß Initialisation du Syst√®me")
        
        # Informations sur la configuration actuelle
        if st.session_state.sections_meta:
            st.success(f"üìã {len(st.session_state.sections_meta)} sections configur√©es")
            
            with st.expander("üìã Aper√ßu des sections", expanded=False):
                for section_name, section_data in st.session_state.sections_meta.items():
                    st.write(f"**{section_name}**")
                    st.write(f"- *Description:* {section_data.get('contenu_initiale', 'N/A')}")
                    st.write("---")
        else:
            st.warning("‚ö†Ô∏è Aucune section configur√©e")
        
        st.markdown("---")
        
        # Bouton d'initialisation
        if st.button("üöÄ **Initialiser l'Agent IA**", type="primary", use_container_width=True):
            if st.session_state.sections_meta and template_id and model_path:
                try:
                    with st.spinner("üîÑ Initialisation en cours..."):
                        agent_tool = AgentAdvisorTool(
                            template_id=template_id,
                            sections_meta=st.session_state.sections_meta,
                            model_path=model_path,
                            weaviate_host=weaviate_host,
                            weaviate_port=int(weaviate_port),
                            grpc_port=int(grpc_port)
                        )
                        
                        if agent_tool.initialize():
                            st.session_state.agent_tool = agent_tool
                            st.session_state.is_initialized = True
                            st.success("‚úÖ **Agent initialis√© avec succ√®s!**")
                            st.info("üéâ L'interface utilisateur est maintenant pr√™te √† √™tre utilis√©e")
                        else:
                            st.error("‚ùå √âchec de l'initialisation de l'agent")
                            
                except Exception as e:
                    st.error(f"‚ùå Erreur lors de l'initialisation: {e}")
                    with st.expander("üîç D√©tails de l'erreur"):
                        st.code(traceback.format_exc())
            else:
                st.warning("‚ö†Ô∏è Veuillez configurer les sections et remplir tous les param√®tres")
        
        # Test de l'agent (si initialis√©)
        if st.session_state.is_initialized:
            st.markdown("---")
            st.subheader("üß™ Test de l'Agent")
            
            test_query = st.text_input("Requ√™te de test:", "Test de fonctionnement")
            test_section = st.selectbox("Section de test:", list(st.session_state.sections_meta.keys()))
            
            if st.button("üß™ Tester", type="secondary"):
                if test_query and test_section:
                    try:
                        with st.spinner("Test en cours..."):
                            result = st.session_state.agent_tool.generate_section(test_section, test_query)
                            st.success("‚úÖ Test r√©ussi!")
                            st.code(result[:200] + "..." if len(result) > 200 else result)
                    except Exception as e:
                        st.error(f"‚ùå Test √©chou√©: {e}")
    
    # √âtat du syst√®me
    st.markdown("---")
    st.header("üìä √âtat du Syst√®me")
    
    col_status1, col_status2, col_status3, col_status4 = st.columns(4)
    
    with col_status1:
        if st.session_state.is_initialized:
            st.success("üü¢ Agent Pr√™t")
        else:
            st.warning("üü° Non Initialis√©")
    
    with col_status2:
        if st.session_state.sections_meta:
            st.success(f"üìã {len(st.session_state.sections_meta)} Sections")
        else:
            st.warning("üìã Pas de Sections")
    
    with col_status3:
        st.info(f"üè∑Ô∏è {template_id}")
    
    with col_status4:
        if st.session_state.agent_tool:
            st.success("üîó Weaviate OK")
        else:
            st.warning("üîó Non Connect√©")
    
    # Guide d'utilisation pour l'admin
    with st.expander("üìñ Guide d'Utilisation Admin"):
        st.markdown("""
        ### üîß **Processus de Configuration:**
        
        1. **üìù Configurez les sections**: Modifiez le JSON selon vos besoins
        2. **üíæ Sauvegardez**: Cliquez sur "Sauvegarder Configuration"  
        3. **üöÄ Initialisez**: Cliquez sur "Initialiser l'Agent IA"
        4. **üß™ Testez**: Utilisez la section de test pour v√©rifier
        5. **üë§ Basculez**: Allez sur "Interface Utilisateur" - c'est pr√™t !
        
        ### ‚ö†Ô∏è **Points Important:**
        - Weaviate doit √™tre d√©marr√© avant l'initialisation
        - La configuration est sauvegard√©e dans la session
        - L'encadrant ne verra que l'interface utilisateur simplifi√©e
        
        ### üîÑ **Pour r√©initialiser:**
        - Modifiez la configuration et re-cliquez sur "Initialiser"
        """)

# Footer
st.sidebar.markdown("---")
st.sidebar.markdown("*Agent Advisor Tool v2.0*")
if page == "üë§ Interface Utilisateur":
    st.sidebar.markdown("üë§ **Mode Utilisateur**")
else:
    st.sidebar.markdown("‚öôÔ∏è **Mode Admin**")